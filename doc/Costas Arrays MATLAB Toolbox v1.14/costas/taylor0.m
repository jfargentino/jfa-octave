function out=taylor0(q,a,b)
%taylor0(p,a,b) generates T0 variant to Golomb arrays

%   Generates the T0 variant to Golomb arrays for a prime power q,
%   with optional prime power, and primitive elements a and b.
%   T0 arrays are generated by trying to add 2 corner dots to G2 arrays.
%
%	Examples
%   --------
%		taylor0(17)
%       % Output is [1 11 15 7 12 13 16 6 3 5 14 10 8 2 9 4 17;
%                    1 13 10 8 16 5 9 15 11 14 7 2 12 3 4 6 17]
%
%		taylor0(17,3)
%       % Output is [1 11 15 7 12 13 16 6 3 5 14 10 8 2 9 4 17]
%
%       taylor0(17,5,7)
%       % Output is [1 13 10 8 16 5 9 15 11 14 7 2 12 3 4 6 17]

%	Code by Ken Taylor, Konstantinos Drakakis & Scott Rickard, UCD.
%	Version 1.3
%	Copyright (c) 2009 by University College Dublin.

if IsNotAPrimePower(q)
    error('enter prime or prime powers only');
end
n=length(factor(q));
p=unique(factor(q));
if nargin==1
    arrays=golomb2(p^n);
elseif nargin==2
    if size(a,2)~=n
        error('a must be of length n');  % error if primitive a is not the right length
    end
    pes=primelem(p^n);           % get primitive elements
    if all(a==1)
        a=pes;
    elseif n==1
        if IsNotPrimitive1(a,pes)          % error if a's entered not primitive
            error([mat2str(a) ' not all primitive in GF(' num2str(p) '). Pick a from ' mat2str(pes) '.']);
        end
    else
        if IsNotPrimitive2(a,pes)       % error if a's entered not primitive
            error([mat2str(a) ' not all primitive in GF(' num2str(p) '). Pick a from ' mat2str(pes) '.']);
        end
    end
    arrays=golomb2(p^n,a);
elseif nargin==2
    if (size(a,2)~=n)||(size(a,2)~=n)
        error('a and b must be of length n');    % error if primitive a is not the right length
    end
    pes=primelem(p^n);            % generate primitive elements
    if n==1
        if IsNotPrimitive1([a b],pes)              % error if a's entered not primitive
            error([mat2str([a b]) ' not all primitive in GF(' num2str(p) '). Pick a from ' mat2str(pes) '.']);
        end
    else
        if IsNotPrimitive2([a;b],pes)        % error if a's entered not primitive
            error([mat2str([a;b]) ' not all primitive in GF(' num2str(p) '). Pick a from ' mat2str(pes) '.']);
        end
    end
    arrays=golomb2(p^n,a,b);
end
out=AddCornerDotsAndFindCostas(arrays);

function out=IsNotAPrimePower(p)
% check if p is a prime power
out=length(unique(factor(p)))~=1;

function out=IsNotPrimitive1(a,pes)
% check if a is primitive for n=1
out=~all(ismember(a,pes));

function out=IsNotPrimitive2(a,pes)
% check if a is primitive for n~=1
out=~all(ismember(a,pes,'rows'));

function out=AddCornerDotsAndFindCostas(arrays)
% add the corner dots and check if they are Costas arrays
[num len]=size(arrays);
results=zeros(2*num,len+2);
results(1:num,:)=cadd('lr',cadd('ul',arrays));
results(num+1:end,:)=cadd('ll',cadd('ur',arrays));
out=results(iscostas(results),:);
if size(out,1)<1
    out=[];
end