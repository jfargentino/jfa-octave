function out=taylor1(q,a,b)
%taylor1(q,a,b) generates T1 variant to Golomb arrays

%   Generates the T1 variant to Golomb arrays for a prime power q,
%   with optional prime power, and primitive elements a and b.
%   T1 arrays are generated by trying to add corner dots to G2 arrays,
%   which can be done when p is not 2.
%
%	Examples
%   --------
%		taylor1(5)
%       % Output is [1 3 4 2;3 4 2 1;2 3 1 4]
%
%		taylor1(7,3)
%       % Output is [2 4 5 3 6 1;6 1 3 4 2 5]
%
%       taylor1(11,6,7)
%       % Output is [8 9 3 5 4 2 7 10 6 1;10 7 8 2 4 3 1 6 9 5]

%	Code by Ken Taylor, Konstantinos Drakakis & Scott Rickard, UCD.
%	Version 1.3
%	Copyright (c) 2009 by University College Dublin.

if IsNotAPrimePower(q)
    error('enter prime or prime powers only');
end
n=length(factor(q));
p=unique(factor(q));
if p==2
    error('p cannot be 2 or a power of 2');
end
if nargin==1
    arrays=golomb2(p^n);
elseif nargin==2
    if size(a,2)~=n
        error('a must be of length n');  % error if primitive a is not the right length
    end
    pes=primelem(p^n);           % get primitive elements
    if all(a==1)
        a=pes;
    elseif n==1
        if IsNotPrimitive1(a,pes)              % error if a's entered not primitive
            error([mat2str(a) ' not all primitive in GF(' num2str(p) '). Pick a from ' mat2str(pes) '.']);                             
        end
    else
        if IsNotPrimitive2(a,pes)       % error if a's entered not primitive
            error([mat2str(a) ' not all primitive in GF(' num2str(p) '). Pick a from ' mat2str(pes) '.']);                             
        end        
    end
    arrays=golomb2(p^n,a);
elseif nargin==3
    if (size(a,2)~=n)||(size(b,2)~=n)
        error('a and b must be of length n');    % error if primitive a is not the right length
    end
    pes=primelem(p^n);            % generate primitive elements
    if n==1
        if IsNotPrimitive1([a b],pes)         % error if a's entered not primitive
            error([mat2str([a b]) ' not all primitive in GF(' num2str(p) '). Pick a from ' mat2str(pes) '.']);                             
        end
    else
        if IsNotPrimitive2([a;b],pes)    % error if a's entered not primitive
            error([mat2str([a;b]) ' not all primitive in GF(' num2str(p) '). Pick a from ' mat2str(pes) '.']);                             
        end
    end
    arrays=golomb2(p^n,a,b);
end
out=AddCornerDotsAndFindCostas(arrays);

function out=IsNotAPrimePower(p)
% check if p is a prime power
out=length(unique(factor(p)))~=1;

function out=IsNotPrimitive1(a,pes)
% check if a is primitive for n=1
out=~all(ismember(a,pes));

function out=IsNotPrimitive2(a,pes)
% check if a is primitive for n~=1
out=~all(ismember(a,pes,'rows'));

function out=AddCornerDotsAndFindCostas(arrays)
% add the corner dots and check if they are Costas arrays
[num len]=size(arrays);
results=zeros(num*4,len+1);
results(1:num,:)=cadd('ul',arrays);
results(num+1:2*num,:)=cadd('ur',arrays);
results((2*num)+1:3*num,:)=cadd('ll',arrays);
results((3*num)+1:end,:)=cadd('lr',arrays);
out=results(iscostas(results),:);
if size(out,1)<1
    out=[];
end