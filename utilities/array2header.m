function ret = array2header (name, x, type)

if (nargin < 3)
   type = 'auto';
end

if ((max (find (name == '.')) == length (name) - 1) & (name (end) == 'h'))
   filename = name;
   name = name (1:end - 2);
else
   filename = [name, '.h'];
end

file = fopen (filename, 'w');
if (file == -1)
   ret = -1;
   return;
end

fprintf (file, '#ifndef %s_H\n', toupper (name));
fprintf (file, '#define %s_H\n\n', toupper (name));
fprintf (file, '/**** Automatically generated by OCTAVE ****/\n\n');

[R, C] = size (x);
if ((R > 1) & (C > 1))
    twodim = 1;
    fprintf (file, '#define %s_ROW %d\n', toupper (name), R);
    fprintf (file, '#define %s_COL %d\n\n', toupper (name), C);
else
    R = length (x);
    fprintf (file, '#define %s_LENGTH %d\n\n', toupper (name), R);
%    fprintf (file, 'enum { %s_LENGTH = %d };\n\n', toupper (name), R);
    twodim = 0;
end

fprintf (file, 'static const ');

if (strcmp (type, 'char') ...
            | strcmp (type, 'schar') ...
            | strcmp (type, 'signed char'))
   fprintf (file, 'char ');
   fmt = '%+hd';
elseif (strcmp (type, 'int8'))
   fprintf (file, 'int8_t ');
   fmt = '%+hd';
elseif (strcmp (type, 'uchar') | strcmp (type, 'unsigned char'))
   fprintf (file, 'unsigned char ');
   fmt = '%hu';
elseif (strcmp (type, 'uint8'))
   fprintf (file, 'uint8_t ');
   fmt = '%hu';
elseif (strcmp (type, 'short') | strcmp (type, 'signed short'))
   fprintf (file, 'short ');
   fmt = '%+hd';
elseif (strcmp (type, 'int16'))
   fprintf (file, 'int16_t ');
   fmt = '%+hd';
elseif (strcmp (type, 'ushort') | strcmp (type, 'unsigned short'))
   fprintf (file, 'unsigned short ');
   fmt = '%hu';
elseif (strcmp (type, 'uint16'))
   fprintf (file, 'uint16_t ');
   fmt = '%hu';
elseif (strcmp (type, 'int') | strcmp (type, 'signed int'))
   fprintf (file, 'int ');
   fmt = '%+d';
elseif (strcmp (type, 'int32'))
   fprintf (file, 'int32_t ');
   fmt = '%+d';
elseif (strcmp (type, 'uint') | strcmp (type, 'unsigned int'))
   fprintf (file, 'unsigned int ');
   fmt = '%u';
elseif (strcmp (type, 'uint32'))
   fprintf (file, 'uint32_t ');
   fmt = '%u';
elseif (strcmp (type, 'long') | strcmp (type, 'signed long'))
   fprintf (file, 'long ');
   fmt = '%+ld';
elseif (strcmp (type, 'ulong') | strcmp (type, 'unsigned long')) 
   fprintf (file, 'unsigned long ');
   fmt = '%lu';
elseif (strcmp (type, 'int64'))
   fprintf (file, 'int64_t ');
   fmt = '%+ld';
elseif (strcmp (type, 'uint64'))
   fprintf (file, 'uint64_t ');
   fmt = '%lu';
elseif (strcmp (type, 'long long') | strcmp (type, 'signed long long'))
   fprintf (file, 'long long ');
   fmt = '%+lld';
elseif (strcmp (type, 'unsigned long long'))
   fprintf (file, 'unsigned long long ');
   fmt = '%llu';
elseif (strcmp (type, 'hex') | strcmp (type, 'hex32'))
   fprintf (file, 'uint32_t ');
   fmt = '0x%08X';
elseif (strcmp (type, 'hex64'))
   fprintf (file, 'uint64_t ');
   fmt = '0x%016X';
elseif (strcmp (type, 'float') ...
            | strcmp (type, 'float32') ...
            | strcmp (type, 'single'))
   fprintf (file, 'float ');
   fmt = '%+.9e';
elseif (strcmp (type, 'double') | strcmp (type, 'float64'))
   fprintf (file, 'double ');
   fmt = '%+.18e';
else
   % auto type depending on array content
   if (length (find (mod (x, 1))) == 0)
      if (length (find (x < 0)) == 0)
         fprintf (file, 'unsigned long ');
         fmt = '%lu';
      else
         fprintf (file, 'long ');
         fmt = '%+ld';
      end
   else
      fprintf (file, 'double ');
      fmt = '%+.18e';
   end   
end

if (twodim)
    fprintf (file, '%s[%d][%d] = {\n', name, R, C);
    for (r = 1:R)
       fprintf (file, '\t\t\t{ ');
       fprintf (file, [fmt, ', '], x(r, 1:C-1));
       if (r == R)
          fprintf (file, [fmt, ' }\n'], x(R, C));
       else
          fprintf (file, [fmt, ' },\n'], x(r, C));
       end
    end
    fprintf (file, '};\n\n');
else
    R = length (x);
    fprintf (file, '%s[%d] = {\n', name, R);
    fprintf (file, ['\t\t\t', fmt, ',\n'], x(1:R-1));
    fprintf (file, ['\t\t\t', fmt, ' };\n'], x(R));
end

fprintf (file, '#endif\n\n'); 
fclose (file);
ret = 0;

